// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  user
  assistant
}

enum TransactionType {
  income
  expense
  transfer
}

enum Category {
  salary
  investment
  shopping
  bills
  food
  transportation
  entertainment
  health
  education
  other
}

model User {
  id           String        @id @default(cuid()) @map("_id")
  clerkId      String        @unique
  email        String        @unique
  name         String?
  avatar       String?
  accounts     Account[]
  transactions Transaction[]
  budgets      Budget[]
  investments  Investment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  name        String
  type        String   // checking, savings, investment, credit
  balance     Float
  currency    String   @default("USD")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          String         @id @default(cuid()) @map("_id")
  userId      String
  accountId   String
  type        TransactionType
  amount      Float
  category    Category
  description String?
  date        DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  account     Account        @relation(fields: [accountId], references: [id])
}

model Budget {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  category    Category
  amount      Float
  spent       Float    @default(0)
  period      String   // monthly, yearly
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Investment {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  name        String
  type        String   // stocks, bonds, crypto
  amount      Float
  currentValue Float
  purchaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
